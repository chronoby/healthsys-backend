#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../src/server');
var debug = require('debug')('app:server');
var http = require('http');
var cors = require('cors');
const WebSocket = require('ws');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
// app.set('port', port);
app.use(cors());
/**
 * Create HTTP server.
 */

var server = http.createServer();

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('request', app);

// ws
const wss = new WebSocket.Server({ server: server, clientTracking: true});

wss.on('connection', function connection(ws) {
    ws.on('message', function incoming(message) {
        console.log('received: %s', message);
        var obj = JSON.parse(message);
        console.log(obj);
        ws.id = obj.from;
        wss.clients.forEach(function each(client) {
            // console.log(ws.id);
            if(client.id === obj.to) {
                client.send("message");
                return;
            }
            // database

        });
    });
    ws.send('get it');
});

setInterval(function() { 
    wss.clients.forEach(function each(client) {
        console.log(client.id);
    });
}, 1000);

wss.on("data", function(client, str) {
    var obj = JSON.parse(str);

    clients[obj.id] = client;
});

server.on('error', onError);
server.on('listening', onListening);

server.listen(port);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
